require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const axios = require('axios');

const removerAcentos = (texto) => {
	return texto.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().trim()
}

const PALAVRAS_ENTRADA = ["bom dia"];

const PALAVRAS_SAIDA = [
	"at√© amanh√£",
	"at√© mais pessoal",
	"at√© pessoal",
	"bom final de semana pessoal",
	"at√© pessoal bom final de semana",
	"at√© mais pessoal bom final de semana",
	"at√© pessoal bom feriado",
	"at√© mais pessoal bom feriado",
	"at√© logo",
	"at√© breve",
	"at√© mais",
	"at√© segunda",
	"at√© ter√ßa",
	"at√© quarta",
	"at√© quinta",
	"at√© sexta",
	"at√© s√°bado",
	"at√© domingo",
	"at√© semana que vem",
	"at√© m√™s que vem",
	"at√© ano que vem",
	"at√© depois",
	"flw",
	"falou",
	"fui"
];

const client = new Client({
	intents: [
		GatewayIntentBits.Guilds,
		GatewayIntentBits.GuildMessages,
		GatewayIntentBits.MessageContent,
		GatewayIntentBits.GuildPresences,
		GatewayIntentBits.GuildMembers,
	]
});

client.once('ready', () => {
	console.log(`‚úÖ Bot ${client.user.tag} est√° online!`);
});

client.on('messageCreate', async (message) => {
	if (message.author.bot) return;

	const mensagemProcessada = removerAcentos(message.content);

	if (PALAVRAS_ENTRADA.some(palavra => mensagemProcessada.includes(palavra))) {
		try {
			await axios.post(`${process.env.API_URL}/register`, {
				usuario: message.author.username,
				mensagem: message.content
			});
			console.log(`‚úÖ Entrada registrada para ${message.author.username}`);
		} catch (error) {
			console.error("‚ùå Erro ao registrar ponto:", error);
			await message.reply("‚ùå Ocorreu um erro ao registrar seu ponto.");
		}
	}

	if (PALAVRAS_SAIDA.some(palavra => removerAcentos(mensagemProcessada).includes(removerAcentos(palavra)))) {
		try {
			await axios.post(`${process.env.API_URL}/register`, {
				usuario: message.author.username,
				mensagem: message.content
			});
			console.log(`‚úÖ Sa√≠da registrada para ${message.author.username}`);
		} catch (error) {
			console.error("‚ùå Erro ao registrar sa√≠da:", error);
			await message.reply("‚ùå Ocorreu um erro ao registrar sua sa√≠da.");
		}
	}
});

client.on('presenceUpdate', async (oldPresence, newPresence) => {
	if (!oldPresence || !newPresence) return;

	const usuario = newPresence.user.username;
	const statusAntigo = oldPresence.status;
	const statusAtual = newPresence.status;

	console.log(`üì° ${usuario} mudou de status: ${statusAntigo} ‚Üí ${statusAtual}`);
	let registro
	try {
		const response = await axios.get(`${process.env.API_URL}/registro/${usuario}`);
		registro = response.data;

		if (registro.saida) {
			console.log(`‚õî ${usuario} j√° marcou sa√≠da √†s ${registro.saida}, n√£o registrando pausa.`);
			return;
		}
	} catch (error) {
		if (error.response && error.response.status === 404) {
			console.log(`üîé Nenhum registro encontrado para ${usuario}, seguindo normalmente.`);
		} else {
			console.error("‚ùå Erro ao verificar status do usu√°rio:", error);
			return;
		}
	}

	if (statusAntigo === "online" && (statusAtual === "idle" || statusAtual === "offline")) {
		try {
			await axios.post(`${process.env.API_URL}/pause`, {
				usuario,
				inicio: new Date().toISOString()
			});
			console.log(`‚è∏Ô∏è Pausa iniciada para ${usuario}`);
		} catch (error) {
			console.error("‚ùå Erro ao registrar pausa:", error);
		}
	}

	if ((statusAntigo === "idle" || statusAntigo === "offline") && statusAtual === "online") {
		try {
			await axios.post(`${process.env.API_URL}/resume`, {
				usuario,
				fim: new Date().toISOString()
			});
			console.log(`‚ñ∂Ô∏è Pausa finalizada para ${usuario}`);
		} catch (error) {
			console.error("‚ùå Erro ao registrar fim da pausa:", error);
		}
	}
});

client.login(process.env.DISCORD_BOT_TOKEN);
